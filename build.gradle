buildscript {
    ext {
        queryDslVersion = "5.0.0"
    }
}
plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.15'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'jacoco'
    //querydsl 추가
    id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}


group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '11'
}


configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.7'

    //  테스트결과 리포트를 저장할 경로 변경하는 방법
    //  default는 "$/jacoco"
    // customJacocoReportDir이라는 디렉토리를 build 디렉토리 내에 생성하고 결과 리포트를 저장합니다.
//    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

test {
    // finalizedBy : 이(test) 작업에 대해 주어진 종료자 작업을 추가
    finalizedBy jacocoTestReport // test 작업이 끝나고 jacocoTestReport를 실행
}
jacocoTestReport {
    // dependsOn : 이 작업에 지정된 종속성을 추가
    dependsOn test // jacocoTestReport 에 test라는 종속성을 추가
}
jacocoTestReport {
    reports {
        // XML 형식의 리포트가 필요하지 않을 경우 false
        xml.required = false
        // CSV 형식의 리포트가 필요하지 않을 경우 false
        csv.required = false
        //  HTML 형식의 리포트를 생성하고 결과를 jacocoHtml 디렉토리에 저장합니다.
        //  여기서 layout.buildDirectory.dir 함수를 사용하여 디렉토리 경로를 지정합니다.
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}
//  코드 커버리지 검증 규칙을 설정
jacocoTestCoverageVerification {
    violationRules {
        // 전체 코드 커버리지의 최소 기준
        rule {
            limit {
                // 전체 커버리지가 최소 50% 이상
                minimum = 0
            }
        }
        //  클래스 수준의 규칙을 설정
        rule {
            enabled = true
            element = 'CLASS'
            // 여기에 있는 패키지만 메서드 커버리지 최소 기준을 설정
            // 여기에 없는 패키지는 제외
            includes = ['com.example.shopping.service.*']

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    // security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // validation(유효성 검사)
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // 서버를 재실행 안해줘도 바로 처리가능하게 만드는 라이브러리
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // mysql
    runtimeOnly 'com.mysql:mysql-connector-j'
    // 룸북
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // swagger
    implementation 'io.springfox:springfox-boot-starter:3.0.0'
    // AWS S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    // in-memory DB
    runtimeOnly 'com.h2database:h2'
    // StringUtils
    implementation 'org.apache.commons:commons-lang3'
    // thymeleaf
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //querydsl 추가
    implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
    implementation "com.querydsl:querydsl-apt:${queryDslVersion}"
    // mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework:spring-context-support'
    // 컨트롤러 테스트를 위해
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}
jar {
    // ~~plain.jar파일은 생성되지 않게
    enabled = false
}
tasks.named('test') {
    useJUnitPlatform()
}
//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"
querydsl {
    jpa = true
    querydslSourcesDir = querydslDir
}
sourceSets {
    main.java.srcDir querydslDir
}
configurations {
    querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}
