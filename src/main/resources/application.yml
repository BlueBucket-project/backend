spring:
  profiles:
    group:
      local:
        - jwt
        - s3
        - oauth
        - local
      prod:
        - prod
#    active: local
    active: ${profile}
  devtools:
    livereload:
      enabled: true
  restart:
    enabled: true

  # swagger
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher

  jpa:
    # 데이터베이스 플랫폼을 지정
    database-platform: org.hibernate.dialect.MySQL5InnoDBDialect
    # JPA Open EntityManager in View 패턴을 활성화 또는 비활성화
    # false하는 경우 : 트래픽이 중요할 때
    # true하는 경우 : 트래픽보다는 성능을 우선하고 싶을 때 (주로 admin - 어드민의 경우 트래픽이 별로 없기 때문)
    open-in-view: false
    hibernate:
      # Hibernate가 데이터베이스 스키마를 자동으로 생성 또는 갱신할 때 사용
      ddl-auto: update
    properties:
      hibernate:
        # SQL 쿼리를 보기 쉽게 형식화할지 여부를 지정
        format_sql: true
        # LAZY 로딩 시 기본적으로 사용되는 배치 크기를 설정
        # fetch join 사용시 최적화
        default_batch_fetch_size: 100
        # SQL 쿼리에 주석을 추가할지 여부를 지정
        use_sql_comments: true

  data:
    web:
      pageable:
        default-page-size: 10
        max-page-size: 2000
        one-indexed-parameters: true

logging:
  level:
    org:
      # Hibernate 라이브러리에 속한 org.hibernate.SQL 패키지의 클래스들에 대한 로그 레벨을 설정합니다.
      # 특정 라이브러리나 패키지에 대한 로그 레벨을 따로 조정하고자 할 때 사용됩니다.
      # Hibernate의 SQL 쿼리를 자세히 보고 싶을 때 유용합니다.
      hibernate:
        SQL: debug
    # 이 설정은 애플리케이션 전반적인 로그 레벨을 설정합니다.
    # root는 로깅의 루트 패키지를 나타냅니다.
    # 따라서 root 패키지 이하의 모든 클래스들에 대한 로그 레벨이 debug로 설정됩니다.
    # 이는 애플리케이션 전체에 적용되는 설정이기 때문에 상세한 로그가 많이 생성될 수 있습니다.
#    root: debug

---
#multipart upload파일 용량설정
#default : 1MB
spring:
  servlet:
    multipart:
      max-file-size: 5MB
      max-request-size: 5MB

